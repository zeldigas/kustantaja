package com.github.zeldigas.text2confl.core.config

import assertk.assertThat
import assertk.assertions.isEqualTo
import com.github.zeldigas.text2confl.convert.EditorVersion
import com.github.zeldigas.text2confl.convert.markdown.*
import com.github.zeldigas.text2confl.core.upload.ChangeDetector
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.net.URI
import java.nio.file.Path
import kotlin.io.path.writeText

class DirectoryConfigTest {
    @Test
    fun `Properly read from file`(@TempDir dir: Path) {
        dir.resolve("text2confl.yml").writeText(
            DirectoryConfig::class.java.getResourceAsStream("/data/text2confl.yml")!!.reader().readText()
        )
        val config = readDirectoryConfig(dir)

        assertThat(config).isEqualTo(
            DirectoryConfig(
                server = "https://example.com",
                skipSsl = true,
                space = "TEST",
                defaultParentId = "1",
                defaultParent = "Parent",
                removeOrphans = Cleanup.None,
                notifyWatchers = false,
                titlePrefix = "a",
                titlePostfix = "b",
                editorVersion = EditorVersion.V1,
                modificationCheck = ChangeDetector.CONTENT,
                docsLocation = "test",
                addAutogeneratedNote = false,
                autogeneratedNote = "test",
                codeBlocks = CodeBlockParams("foo", mapOf("aa" to "js")),
                markdown = MarkdownParams(
                    anyMacro = true,
                    enabledMacros = listOf("abc"),
                    emoji = true,
                    diagrams = MarkdownDiagramParameters(
                        tempDir = true,
                        baseDir = "abc",
                        mermaid = MermaidDiagramsConfiguration(
                            enabled = false,
                            defaultFormat = "svg",
                            executable = "mmm",
                            configFile = "file",
                            cssFile = "css",
                            puppeeterConfig = "pc"
                        ),
                        plantuml = PlantUmlDiagramsConfiguration(
                            enabled = false,
                            executable = "pu",
                            defaultFormat = "svg"
                        ),
                        kroki = KrokiDiagramsConfiguration(
                            enabled = false,
                            server = URI.create("https://example.org"),
                            defaultFormat = "svg"
                        )
                    ),
                    autoLinks = false,
                    tables = TablesConfiguration(
                        columnSpans = false,
                        discardExtraColumns = false,
                        appendMissingColumns = false,
                        headerSeparatorColumnMatch = false
                    ),
                    typography = TypographyConfiguration(quotes = true, smarts = false)
                ),
                asciidoc = AsciidocParams(
                    gems = listOf("a"),
                    diagrams = AsciidocDiagrams.None,
                    bundledMacros = false,
                    attributes = mapOf("toclevels" to 5),
                    tempDir = true,
                    baseDir = "b"
                )
            )
        )
    }
}