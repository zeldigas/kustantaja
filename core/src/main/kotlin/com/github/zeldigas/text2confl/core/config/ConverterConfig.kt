package com.github.zeldigas.text2confl.core.config

import com.github.zeldigas.text2confl.convert.EditorVersion
import com.github.zeldigas.text2confl.convert.asciidoc.AsciidoctorConfiguration
import com.github.zeldigas.text2confl.convert.confluence.LanguageMapper
import com.github.zeldigas.text2confl.convert.markdown.MarkdownConfiguration
import io.ktor.http.*
import java.nio.file.Path

data class ConverterConfig(
    val titlePrefix: String,
    val titlePostfix: String,
    val editorVersion: EditorVersion,
    val addAutogeneratedNote: Boolean?,
    val docsLocation: String?,
    val autogeneratedNote: String?,
    val codeBlockParams: CodeBlockParams,
    val markdownConfig: MarkdownConfiguration,
    val asciidocConfig: AsciidoctorConfiguration
) {
    val languageMapper: LanguageMapper
        get() = when (editorVersion) {
            EditorVersion.V1 -> LanguageMapper.forServer(codeBlockParams.defaultLanguage, codeBlockParams.extraMapping)
            EditorVersion.V2 -> LanguageMapper.forCloud(codeBlockParams.defaultLanguage, codeBlockParams.extraMapping)
        }

    val titleConverter: (Path, String) -> String
        get() = { _, title -> "$titlePrefix${title}${titlePostfix}" }
}

fun createConversionConfig(
    directoryConfig: DirectoryConfig,
    editorVersion: EditorVersion?,
    server: Url?
): ConverterConfig {
    val selectedVersion = editorVersion ?: directoryConfig.editorVersion
    return ConverterConfig(
        titlePrefix = directoryConfig.titlePrefix,
        titlePostfix = directoryConfig.titlePostfix,
        editorVersion = selectedVersion ?: inferFromUrl(server),
        addAutogeneratedNote = directoryConfig.addAutogeneratedNote,
        docsLocation = directoryConfig.docsLocation,
        autogeneratedNote = directoryConfig.autogeneratedNote,
        codeBlockParams = directoryConfig.codeBlocks,
        markdownConfig = directoryConfig.markdown.toConfig(directoryConfig.docsDir),
        asciidocConfig = directoryConfig.asciidoc.toConfig(directoryConfig.docsDir)
    )
}

private fun inferFromUrl(server: Url?): EditorVersion {
    return if (server?.host?.endsWith(".atlassian.net", ignoreCase = true) == true) {
        EditorVersion.V2
    } else {
        EditorVersion.V1
    }
}
